{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/SearchBox.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","height","children","Searchbox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","SearchBox","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACtB,OAEC,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cAChB,6BACC,4BAAKF,GACL,2BAAIC,MCaFK,EAnBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACjB,OACE,6BAEDA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACG,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCDXW,EATA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAWC,OAAO,kBAAqBC,OAAQ,UAC7DJ,EAAMK,WCSHC,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKlB,UAAU,OACZ,2BAAOA,UAAU,mCACfmB,KAAK,SACLC,YAAY,eACZC,SAAUH,MCgBFI,E,kDAtBd,WAAYZ,GAAO,IAAD,8BACjB,cAAMA,IACDa,MAAO,CACXC,UAAW,GAHK,E,8DAOAC,EAAMC,GAClBC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAIhC,OAAOG,KAAKJ,MAAMC,SAAY,sDAC7BG,KAAKjB,MAAMK,a,GAdac,aCyDZC,G,wDAlDd,aAAe,IAAD,8BACb,gBAmBEC,eAAiB,SAACC,GACf,EAAKJ,SAAS,CAACX,YAAae,EAAMC,OAAOC,SAnB9C,EAAKX,MAAO,CACXnB,OAAO,GACPa,YAAa,IAJD,E,gEAQU,IAAD,OACnBkB,MAAM,8CACDC,MAAK,SAAAC,GACT,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKX,SAAS,CAAExB,OAAQmC,S,+BASpB,IAAD,EACsBZ,KAAKJ,MAA3BnB,EADA,EACAA,OAAOa,EADP,EACOA,YACRuB,EAAiBpC,EAAOqC,QAAO,SAAAC,GAC/B,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS3B,EAAY0B,kBAE5D,OAAQvC,EAAOyC,OAIZ,yBAAK7C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC8C,EAAD,CAAW5B,aAAcS,KAAKI,iBAC9B,kBAAC,EAAD,KACG,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAU3B,OAAQoC,OAR5B,2C,GA9BiBX,c,MCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.51d21d26.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n      return(\r\n\r\n       <div className='tc bg-light-green dib bw2 pa3 br3 shadow-5 grow ma2'> \r\n\t      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n  \t         <div>\r\n\t      \t     <h2>{name}</h2>\r\n\t      \t     <p>{email}</p>\r\n  \t         </div>\r\n       </div>\r\n     );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n  return(\r\n    <div>\r\n      {\r\n\t\t robots.map((user,i) =>{\r\n\t\t   return (\r\n\t\t  \t\t  <Card \r\n\t\t\t  \t\t  key={i} \r\n\t\t\t  \t\t  id={robots[i].id}\r\n\t\t\t  \t\t  name={robots[i].name}\r\n\t\t\t  \t\t  email={robots[i].email}\r\n\t\t  \t\t  />\r\n\t\t  \t);\r\n\t\t })\r\n      }\r\n    </div>  \r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div style={{overflowY: 'Scroll' , border:'5px solid black' ,  height: '800px'}}>\r\n           {props.children}\r\n\t\t</div>\r\n    );\r\n};\r\n\r\n\r\nexport default Scroll;","import React from 'react';\r\n \r\n\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t   <input className='pa3 ba b--green bg-lightest-blue' \r\n\t\t     type='Search'\r\n\t\t     placeholder='SearchRobots'\r\n\t\t     onChange={searchChange}\r\n\t\t   />\r\n\t\t</div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state= {\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n       this.setState({ hasError : true})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn this.state.hasError ?  <h1>Oops..That is Not Good</h1> :\r\n\t\t this.props.children;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport Scroll from '../Components/Scroll.js'\r\nimport SearchBox from '../Components/SearchBox';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport './App.css'\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state= {\r\n\t\t\trobots:[],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n    }\r\n   \r\n    componentDidMount() {\r\n    \tfetch('https://jsonplaceholder.typicode.com/users')\r\n    \t    .then(response =>{\r\n    \t\treturn response.json();\r\n    \t})\r\n\t    .then(users => {\r\n\t    \tthis.setState({ robots: users });\r\n\t    })\r\n    \t\r\n    }\r\n\r\n\r\n    onSearchChange = (event) => {\r\n       this.setState({searchfield: event.target.value})\r\n    }\r\n\trender(){\r\n\t\tconst {robots,searchfield} = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n       \treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n       })\r\n\treturn !robots.length ?\r\n\t<h1>Loading</h1> :\r\n\t\t\r\n            (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t   <ErrorBoundry>\r\n\t\t\t\t\t      <CardList robots={filteredRobots} />\r\n\t\t\t\t\t   </ErrorBoundry> \r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n            );\r\n         \r\n\r\n\t\t\r\n\t}\r\n\t\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport 'tachyons';\n\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}